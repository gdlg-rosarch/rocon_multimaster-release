#!/usr/bin/env python
#       
# License: BSD
#   https://raw.github.com/robotics-in-concert/rocon_multimaster/master/rocon_gateway/LICENSE 
#

##############################################################################
# Imports
##############################################################################

import sys
import argparse
import re
import rospy
import rocon_gateway
import gateway_msgs
import rocon_utilities
import rocon_utilities.console as console
import rocon_gateway.utils as utils

##############################################################################
# Functions
##############################################################################
    
def parse_arguments():
    parser = argparse.ArgumentParser(description='Prettifies remote gateway info')
    args = parser.parse_args()
    return args

def resolve_local_gateway():
    master = rocon_gateway.LocalMaster()
    gateway_namespace = master.find_gateway_namespace()
    if not gateway_namespace:
        console.error("Could not find a local gateway - did you start it?")
        raise rocon_gateway.GatewayError("Cannot proceed without a local gateway, aborting")
    #console.debug("Found a local gateway at %s"%gateway_namespace)
    ip = master.get_ros_ip()
    return gateway_namespace, ip
   
def resolve_remote_gateways(gateway_namespace):
    '''
      @raise rocon_gateway.GatewayError: if no remote gateways or no matching gateways available. 
    '''
    remote_gateways = []
    remote_gateway_info = rospy.ServiceProxy(gateway_namespace+'/remote_gateway_info', gateway_msgs.srv.RemoteGatewayInfo)
    req = gateway_msgs.srv.RemoteGatewayInfoRequest()
    req.gateways = []
    resp = remote_gateway_info(req)
    #print("Remote gateway info: %s" % resp)
    return resp.gateways

##############################################################################
# Main
##############################################################################

if __name__ == '__main__':
    
    rospy.init_node('pull')
    args = parse_arguments()
    gateway_namespace = None
    remote_gateways = None
    ip = None
    
    try:
        gateway_namespace, ip = resolve_local_gateway()
        remote_gateways = resolve_remote_gateways(gateway_namespace)
    except rocon_gateway.GatewayError, e:
        console.error(str(e))
        sys.exit(1)
    console.pretty_print("Local Gateway\n", console.bold)
    print("  Namespace: %s"%gateway_namespace)
    print("  Ip/Hostname: %s"%ip)
    # I wanted to put local ip here 
    for gateway in remote_gateways:
        console.pretty_print("Remote Gateway\n",console.bold)
        print("  Name        : %s" % rocon_utilities.gateway_basename(gateway.name))
        print("  Hash Name   : %s" % gateway.name)
        print("  Ip/Hostname: %s"%gateway.ip)
        print("  Firewall   : %s"%gateway.firewall)

        print("  Public Interface")
        if len(gateway.public_interface) == 0:
            print("          : -")
        for rule in gateway.public_interface:
            print("          : "),
            console.pretty_print(rule.name,console.green)
            print("-"),
            console.pretty_print(rule.type,console.cyan)
            print("-"),
            console.pretty_print(rule.node+"\n",console.yellow)

        print("  Flipped Interface")
        if len(gateway.flipped_interface) == 0:
            print("          : -")
        for remote_rule in gateway.flipped_interface:
            print("          : "),
            console.pretty_print(remote_rule.gateway,console.red)
            print("-"),
            console.pretty_print(remote_rule.rule.name,console.green)
            print("-"),
            console.pretty_print(remote_rule.rule.type,console.cyan)
            print("-"),
            console.pretty_print(remote_rule.rule.node+"\n",console.yellow)

        print("  Pulled Interface")
        if len(gateway.pulled_interface) == 0:
            print("          : -")
        for remote_rule in gateway.pulled_interface:
            print("          : "),
            console.pretty_print(remote_rule.gateway,console.red)
            print("-"),
            console.pretty_print(remote_rule.rule.name,console.green)
            print("-"),
            console.pretty_print(remote_rule.rule.type,console.cyan)
            print("-"),
            console.pretty_print(remote_rule.rule.node+"\n",console.yellow)
